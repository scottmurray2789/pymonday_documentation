{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview PyMonday is a monday.com API Python Client Library, compatible with API version 2023-10 and later. Official API Documentation Monday API Documentation Installation To install pymonday, use the following pip command in your project virtual environment. pip install pymonday API Authentication This library requires you have a valid monday.com API key stored as a local system environment variable. Review the Official API Documentation for instructions on obtaining an API Key. Instantiate Client Object To import the monday.com API client into your project, use the following import statement: from pymonday import MondayAPIClient An instance of the API Client Object can then be created: monday = MondayAPIClient () The object can then be called and its methods accessed in order to interact with the monday.com API: Example: monday.get_user_info(user_id=12345) A full list of all available methods can be found in the next sections of the documentation.","title":"Overview"},{"location":"#overview","text":"PyMonday is a monday.com API Python Client Library, compatible with API version 2023-10 and later.","title":"Overview"},{"location":"#official-api-documentation","text":"Monday API Documentation","title":"Official API Documentation"},{"location":"#installation","text":"To install pymonday, use the following pip command in your project virtual environment. pip install pymonday","title":"Installation"},{"location":"#api-authentication","text":"This library requires you have a valid monday.com API key stored as a local system environment variable. Review the Official API Documentation for instructions on obtaining an API Key.","title":"API Authentication"},{"location":"#instantiate-client-object","text":"To import the monday.com API client into your project, use the following import statement: from pymonday import MondayAPIClient An instance of the API Client Object can then be created: monday = MondayAPIClient () The object can then be called and its methods accessed in order to interact with the monday.com API: Example: monday.get_user_info(user_id=12345) A full list of all available methods can be found in the next sections of the documentation.","title":"Instantiate Client Object"},{"location":"1.101%20Boards/","text":"Boards get_all_boards() get_all_boards() Description: Get all boards from the platform. Arguments: None Returns: Dictionary containing the Board UUID and its name. Example: boards = monday.get_all_boards() get_board_info() get_board_info(board_id=Integer) Description: Get the following information from a board: Name, ID, State, Permissions, Type, Workspace. Arguments: board_id: UUID of the board. Returns: Dictionary containing above information. Example: board_info = monday.get_board_info(board_id=123456789) get_board_groups() get_board_groups(board_id=Integer) Description: Get all groups of a specific board. Arguments: board_id: UUID of the board. Returns: Dictionary containing Group IDs and Group Names. Example: groups = monday.get_board_groups(board_id=123456789) create_board() create_board(board_name=String, board_type=String, workspace_id=Integer) Description: Create a new board within a specific workspace. Arguments: board_name: Required. The Name of the new board board_type: Required. Board Visibility. Options: public, private, share workspace_id: Required. UUID of the workspace to create the board in Returns: UUID of the newly created board. Example: new_board = monday.create_board(board_name=\"New Board\", board_type=\"private\", workspace_id=12345) delete_board() delete_board(board_id=Integer) Description: Delete a board. Arguments: board_id: UUID of the board. Returns: ID of the board which was deleted. Example: print(monday.delete_board(board_id=12345678)) update_board_description() update_board_description(board_id=Integer, description=String) Description: Update the description of a specific board. Arguments: board_id: UUID of the board. description: Text String to be used as the board description. Returns: None Example: monday.update_board_description(board_id=12345678, description=\"New Description\") archive_board() archive_board(board_id=Integer) Description: Archive a board. Arguments: board_id: UUID of the board. Returns: None Example: monday.archive_board(board_id=12345678)","title":"Boards"},{"location":"1.101%20Boards/#boards","text":"","title":"Boards"},{"location":"1.101%20Boards/#get_all_boards","text":"get_all_boards() Description: Get all boards from the platform. Arguments: None Returns: Dictionary containing the Board UUID and its name. Example: boards = monday.get_all_boards()","title":"get_all_boards()"},{"location":"1.101%20Boards/#get_board_info","text":"get_board_info(board_id=Integer) Description: Get the following information from a board: Name, ID, State, Permissions, Type, Workspace. Arguments: board_id: UUID of the board. Returns: Dictionary containing above information. Example: board_info = monday.get_board_info(board_id=123456789)","title":"get_board_info()"},{"location":"1.101%20Boards/#get_board_groups","text":"get_board_groups(board_id=Integer) Description: Get all groups of a specific board. Arguments: board_id: UUID of the board. Returns: Dictionary containing Group IDs and Group Names. Example: groups = monday.get_board_groups(board_id=123456789)","title":"get_board_groups()"},{"location":"1.101%20Boards/#create_board","text":"create_board(board_name=String, board_type=String, workspace_id=Integer) Description: Create a new board within a specific workspace. Arguments: board_name: Required. The Name of the new board board_type: Required. Board Visibility. Options: public, private, share workspace_id: Required. UUID of the workspace to create the board in Returns: UUID of the newly created board. Example: new_board = monday.create_board(board_name=\"New Board\", board_type=\"private\", workspace_id=12345)","title":"create_board()"},{"location":"1.101%20Boards/#delete_board","text":"delete_board(board_id=Integer) Description: Delete a board. Arguments: board_id: UUID of the board. Returns: ID of the board which was deleted. Example: print(monday.delete_board(board_id=12345678))","title":"delete_board()"},{"location":"1.101%20Boards/#update_board_description","text":"update_board_description(board_id=Integer, description=String) Description: Update the description of a specific board. Arguments: board_id: UUID of the board. description: Text String to be used as the board description. Returns: None Example: monday.update_board_description(board_id=12345678, description=\"New Description\")","title":"update_board_description()"},{"location":"1.101%20Boards/#archive_board","text":"archive_board(board_id=Integer) Description: Archive a board. Arguments: board_id: UUID of the board. Returns: None Example: monday.archive_board(board_id=12345678)","title":"archive_board()"},{"location":"1.102%20Users/","text":"Users get_all_users() get_all_users() Description: Get the names of all platform users and their UUIDs Arguments: None Returns: Dictionary of item IDs and usernames. Return None on API call failure. Example: boards = monday.get_all_users() get_user_info() get_user_info(user_id=Integer) Description: Get all details of a specific user. One UUID permitted per query. Arguments: user_id: UUID of the user. Returns: Dictionary containing user specific information. Return None on API call failure. Example: user_data = monday.get_user_info(user_id=12345) add_user_to_workspace() add_user_to_workspace(workspace_id=Integer, user_ids=List) Description: Add users to a workspace as subscribers. Arguments: workspace_id: UUID of the workspace. Single Integer value. user_ids: UUIDs of the monday.com users to add. Should be a list of integers. Returns: None Example: print(monday.add_user_to_workspace(workspace_id=12345, user_ids=[12345, 54321])) delete_user_from_workspace() delete_user_from_workspace(workspace_id=Integer, user_ids=List) Description: Remove users from a workspace. Arguments: workspace_id: UUID of the workspace. Single Integer value. user_ids: UUIDs of the monday.com users to add. Should be a list of integers. Returns: None Example: print(monday.delete_user_from_workspace(workspace_id=12345, user_ids=[12345, 54321])) add_user_to_board() add_user_to_board(board_id=Integer, user_ids=List) Description: Add users to a board as subscribers. Arguments: board_id: UUID of the board. Single Integer value. user_ids: UUIDs of the monday.com users to add. Should be a list of integers. Returns: None Example: print(monday.add_user_to_board(board_id=12345, user_ids=[12345, 54321])) delete_user_from_board() delete_user_from_board(board_id=Integer, user_ids=List) Description: Remove users from a board. Arguments: board_id: UUID of the board. Single Integer value. user_ids: UUIDs of the monday.com users to add. Should be a list of integers. Returns: None Example: print(monday.delete_user_from_board(boardid=12345, user_ids=[12345, 54321]))","title":"Users"},{"location":"1.102%20Users/#users","text":"","title":"Users"},{"location":"1.102%20Users/#get_all_users","text":"get_all_users() Description: Get the names of all platform users and their UUIDs Arguments: None Returns: Dictionary of item IDs and usernames. Return None on API call failure. Example: boards = monday.get_all_users()","title":"get_all_users()"},{"location":"1.102%20Users/#get_user_info","text":"get_user_info(user_id=Integer) Description: Get all details of a specific user. One UUID permitted per query. Arguments: user_id: UUID of the user. Returns: Dictionary containing user specific information. Return None on API call failure. Example: user_data = monday.get_user_info(user_id=12345)","title":"get_user_info()"},{"location":"1.102%20Users/#add_user_to_workspace","text":"add_user_to_workspace(workspace_id=Integer, user_ids=List) Description: Add users to a workspace as subscribers. Arguments: workspace_id: UUID of the workspace. Single Integer value. user_ids: UUIDs of the monday.com users to add. Should be a list of integers. Returns: None Example: print(monday.add_user_to_workspace(workspace_id=12345, user_ids=[12345, 54321]))","title":"add_user_to_workspace()"},{"location":"1.102%20Users/#delete_user_from_workspace","text":"delete_user_from_workspace(workspace_id=Integer, user_ids=List) Description: Remove users from a workspace. Arguments: workspace_id: UUID of the workspace. Single Integer value. user_ids: UUIDs of the monday.com users to add. Should be a list of integers. Returns: None Example: print(monday.delete_user_from_workspace(workspace_id=12345, user_ids=[12345, 54321]))","title":"delete_user_from_workspace()"},{"location":"1.102%20Users/#add_user_to_board","text":"add_user_to_board(board_id=Integer, user_ids=List) Description: Add users to a board as subscribers. Arguments: board_id: UUID of the board. Single Integer value. user_ids: UUIDs of the monday.com users to add. Should be a list of integers. Returns: None Example: print(monday.add_user_to_board(board_id=12345, user_ids=[12345, 54321]))","title":"add_user_to_board()"},{"location":"1.102%20Users/#delete_user_from_board","text":"delete_user_from_board(board_id=Integer, user_ids=List) Description: Remove users from a board. Arguments: board_id: UUID of the board. Single Integer value. user_ids: UUIDs of the monday.com users to add. Should be a list of integers. Returns: None Example: print(monday.delete_user_from_board(boardid=12345, user_ids=[12345, 54321]))","title":"delete_user_from_board()"},{"location":"1.103%20Workspaces/","text":"Workspaces get_workspaces() get_workspaces() Description: Get all monday.com workspaces Arguments: None Returns: Dictionary of workspaces IDs and Names. Returns None on API call failure. Example: workspaces = monday.get_workspaces()","title":"Workspaces"},{"location":"1.103%20Workspaces/#workspaces","text":"","title":"Workspaces"},{"location":"1.103%20Workspaces/#get_workspaces","text":"get_workspaces() Description: Get all monday.com workspaces Arguments: None Returns: Dictionary of workspaces IDs and Names. Returns None on API call failure. Example: workspaces = monday.get_workspaces()","title":"get_workspaces()"},{"location":"1.104%20Teams/","text":"Teams get_teams() get_teams() Description: Get Names and IDs of all teams. Arguments: None Returns: Dictionary of IDs and Names. Return None on API call failure. Example: teams = monday.get_teams() get_team_members() get_team_members(team_ids=List) Description: Get User ID, Name & Email of team members. Arguments: team_ids: UUIDs of the Teams to be retrieved. List of integers. Returns: Dictionary of Teams and member data. Return None on API call failure. Example: team_data = monday.get_team_members(team_ids=[12345, 54321])","title":"Teams"},{"location":"1.104%20Teams/#teams","text":"","title":"Teams"},{"location":"1.104%20Teams/#get_teams","text":"get_teams() Description: Get Names and IDs of all teams. Arguments: None Returns: Dictionary of IDs and Names. Return None on API call failure. Example: teams = monday.get_teams()","title":"get_teams()"},{"location":"1.104%20Teams/#get_team_members","text":"get_team_members(team_ids=List) Description: Get User ID, Name & Email of team members. Arguments: team_ids: UUIDs of the Teams to be retrieved. List of integers. Returns: Dictionary of Teams and member data. Return None on API call failure. Example: team_data = monday.get_team_members(team_ids=[12345, 54321])","title":"get_team_members()"},{"location":"1.105%20Groups/","text":"Groups create_group() create_group(board_id=Integer, group_name=String) Description: Create a new group on a board at the top position. Arguments: board_id: UUID of the board. Single Integer value. group_name: Name of the new group to be created. Returns: UUID of the newly created group. Example: new_group = monday.create_group(board_id=12345678, group_name=\"New Group\") delete_group() delete_group(board_id=Integer, group_name=String) Description: Delete a group from a board. Arguments: board_id: UUID of the board. Single Integer value. group_name: Name of the new group to delete Returns: None Example: print(monday.delete_group(board_id=12345678, group_name=\"New Group\")) move_item_to_group() move_item_to_group(item_id=Integer, group_id=String) Description: Move an item from one group in a board to another. Arguments: item_id: UUID of the item to move. group_id: UUID of the group to move the item to. Returns: None Example: print(monday.move_item_to_group(item_id=12345678, group_id=\"group_id\"))","title":"Groups"},{"location":"1.105%20Groups/#groups","text":"","title":"Groups"},{"location":"1.105%20Groups/#create_group","text":"create_group(board_id=Integer, group_name=String) Description: Create a new group on a board at the top position. Arguments: board_id: UUID of the board. Single Integer value. group_name: Name of the new group to be created. Returns: UUID of the newly created group. Example: new_group = monday.create_group(board_id=12345678, group_name=\"New Group\")","title":"create_group()"},{"location":"1.105%20Groups/#delete_group","text":"delete_group(board_id=Integer, group_name=String) Description: Delete a group from a board. Arguments: board_id: UUID of the board. Single Integer value. group_name: Name of the new group to delete Returns: None Example: print(monday.delete_group(board_id=12345678, group_name=\"New Group\"))","title":"delete_group()"},{"location":"1.105%20Groups/#move_item_to_group","text":"move_item_to_group(item_id=Integer, group_id=String) Description: Move an item from one group in a board to another. Arguments: item_id: UUID of the item to move. group_id: UUID of the group to move the item to. Returns: None Example: print(monday.move_item_to_group(item_id=12345678, group_id=\"group_id\"))","title":"move_item_to_group()"},{"location":"1.106%20Folders/","text":"Folders get_folders() get_folders(workspace_id=Integer) Description: Get all folders in a workspace. Arguments: workspace_id: UUID of the workspace. Returns: Array of Dictionaries containing folder data. Return None on API call failure. Example: folders = monday.get_folders(workspace_id=12345) create_folder() create_folder(name=String, workspace_id=Integer, **kwargs) Description: Create a folder in a workspace. Pass keyword arguments to configure folder attributes. **Keywords must be passed exactly as defined below. Folder colors can be found here: https://asset.cloudinary.com/monday-platform-dev/3e39afb2309b512f4f53cc9173554d48 Arguments: name: The Folders name (Required) workspace_id: The unique identifier of the workspace to create the new folder in (Required) kwargs: color : The folders color. parent_folder_id : The ID of the folder you want to nest the new one under. Nesting is limited to 1 tier. Returns: UUID of the newly created folder. Example: new_folder = monday.create_folder(name=\"Folder A\", workspace_id=12345, color=\"BRIGHT GREEN\", parent_folder_id=12345) update_folder() update_folder(folder_id=Integer, **kwargs) Description: Update a folder in a workspace. Pass keyword arguments to configure folder attributes. **Keywords must be passed exactly as defined below. Folder colors can be found here: https://asset.cloudinary.com/monday-platform-dev/3e39afb2309b512f4f53cc9173554d48 Arguments: folder_id: The Folders UUID (Required) kwargs: name : New folder name. color : The folders color. parent_folder_id : The ID of the folder you want to nest the new one under. Nesting is limited to 1 tier. Returns: None Example: print(monday.update_folder(folder_id=12345, name=\"New Folder Name\", color=\"DONE GREEN\", parent_folder_id=12345)) delete_folder() delete_folder(folder_id=Integer) Description: Delete a folder from a workspace Arguments: folder_id: UUID of the folder to delete. Returns: None Example: print(monday.delete_folder(folder_id=12345))","title":"Folders"},{"location":"1.106%20Folders/#folders","text":"","title":"Folders"},{"location":"1.106%20Folders/#get_folders","text":"get_folders(workspace_id=Integer) Description: Get all folders in a workspace. Arguments: workspace_id: UUID of the workspace. Returns: Array of Dictionaries containing folder data. Return None on API call failure. Example: folders = monday.get_folders(workspace_id=12345)","title":"get_folders()"},{"location":"1.106%20Folders/#create_folder","text":"create_folder(name=String, workspace_id=Integer, **kwargs) Description: Create a folder in a workspace. Pass keyword arguments to configure folder attributes. **Keywords must be passed exactly as defined below. Folder colors can be found here: https://asset.cloudinary.com/monday-platform-dev/3e39afb2309b512f4f53cc9173554d48 Arguments: name: The Folders name (Required) workspace_id: The unique identifier of the workspace to create the new folder in (Required) kwargs: color : The folders color. parent_folder_id : The ID of the folder you want to nest the new one under. Nesting is limited to 1 tier. Returns: UUID of the newly created folder. Example: new_folder = monday.create_folder(name=\"Folder A\", workspace_id=12345, color=\"BRIGHT GREEN\", parent_folder_id=12345)","title":"create_folder()"},{"location":"1.106%20Folders/#update_folder","text":"update_folder(folder_id=Integer, **kwargs) Description: Update a folder in a workspace. Pass keyword arguments to configure folder attributes. **Keywords must be passed exactly as defined below. Folder colors can be found here: https://asset.cloudinary.com/monday-platform-dev/3e39afb2309b512f4f53cc9173554d48 Arguments: folder_id: The Folders UUID (Required) kwargs: name : New folder name. color : The folders color. parent_folder_id : The ID of the folder you want to nest the new one under. Nesting is limited to 1 tier. Returns: None Example: print(monday.update_folder(folder_id=12345, name=\"New Folder Name\", color=\"DONE GREEN\", parent_folder_id=12345))","title":"update_folder()"},{"location":"1.106%20Folders/#delete_folder","text":"delete_folder(folder_id=Integer) Description: Delete a folder from a workspace Arguments: folder_id: UUID of the folder to delete. Returns: None Example: print(monday.delete_folder(folder_id=12345))","title":"delete_folder()"},{"location":"1.107%20Notifications/","text":"Notifications create_notification() create_notification(user_id=Integer, target=Integer, body=String, target_type=String) Description: Send a notification to a user. Arguments: user_id: UUID of the user to send the notification to. target: The target's unique identifier. The value depends on the target_type body: The notification's text. target_type: the target's type: project or post. - Project: sends a notification referring to a specific item or board - Post : sends a notification referring to a specific item's update or reply Returns: None Example: print(monday.create_notification(user_id=12345, target=123456789, body=\"Notification Text\", target_type=\"Project\"))","title":"Notifications"},{"location":"1.107%20Notifications/#notifications","text":"","title":"Notifications"},{"location":"1.107%20Notifications/#create_notification","text":"create_notification(user_id=Integer, target=Integer, body=String, target_type=String) Description: Send a notification to a user. Arguments: user_id: UUID of the user to send the notification to. target: The target's unique identifier. The value depends on the target_type body: The notification's text. target_type: the target's type: project or post. - Project: sends a notification referring to a specific item or board - Post : sends a notification referring to a specific item's update or reply Returns: None Example: print(monday.create_notification(user_id=12345, target=123456789, body=\"Notification Text\", target_type=\"Project\"))","title":"create_notification()"},{"location":"1.108%20Updates/","text":"Updates get_item_updates() get_item_updates(item_id=Integer) Description: Get the updates from an item. Arguments: item_id: UUID of the item. Returns: Array of Dictionaries containing the update data. Return None on API call failure. Example: updates = monday.get_item_updates(item_id=123456789) create_update() create_update(item_id=Integer, update_text=String) Description: Create an update on an item. Arguments: item_id: UUID of the item to leave the update on. update_text: Body of the update. Returns: None Example: print(monday.create_updates(item_id=123456789, update_text=\"Update Text\")) create_reply() create_reply(item_id=Integer, update_text=String, parent_id=Integer) Description: Reply to an update on an item. Arguments: item_id: UUID of the item to leave the update on. update_text: Body of the update. parent_id: UUID of the update to leave a reply on. Returns: UUID of the Reply. Return None on API call failure. Example: print(monday.create_reply(item_id=123456789, update_text=\"Update Text\", parent_id=987654321)) delete_update() delete_update(update_id=Integer) Description: Delete an update on an item. Arguments: update_id: UUID of the update. Returns: None Example: print(monday.delete_update(update_id=123456789)) clear_updates() clear_updatesitem_id=Integer) Description: Clear all updates from an item. Arguments: item_id: UUID of the item. Returns: None Example: print(monday.clear_updates(item_id=123456789))","title":"Updates"},{"location":"1.108%20Updates/#updates","text":"","title":"Updates"},{"location":"1.108%20Updates/#get_item_updates","text":"get_item_updates(item_id=Integer) Description: Get the updates from an item. Arguments: item_id: UUID of the item. Returns: Array of Dictionaries containing the update data. Return None on API call failure. Example: updates = monday.get_item_updates(item_id=123456789)","title":"get_item_updates()"},{"location":"1.108%20Updates/#create_update","text":"create_update(item_id=Integer, update_text=String) Description: Create an update on an item. Arguments: item_id: UUID of the item to leave the update on. update_text: Body of the update. Returns: None Example: print(monday.create_updates(item_id=123456789, update_text=\"Update Text\"))","title":"create_update()"},{"location":"1.108%20Updates/#create_reply","text":"create_reply(item_id=Integer, update_text=String, parent_id=Integer) Description: Reply to an update on an item. Arguments: item_id: UUID of the item to leave the update on. update_text: Body of the update. parent_id: UUID of the update to leave a reply on. Returns: UUID of the Reply. Return None on API call failure. Example: print(monday.create_reply(item_id=123456789, update_text=\"Update Text\", parent_id=987654321))","title":"create_reply()"},{"location":"1.108%20Updates/#delete_update","text":"delete_update(update_id=Integer) Description: Delete an update on an item. Arguments: update_id: UUID of the update. Returns: None Example: print(monday.delete_update(update_id=123456789))","title":"delete_update()"},{"location":"1.108%20Updates/#clear_updates","text":"clear_updatesitem_id=Integer) Description: Clear all updates from an item. Arguments: item_id: UUID of the item. Returns: None Example: print(monday.clear_updates(item_id=123456789))","title":"clear_updates()"},{"location":"1.109%20Files/","text":"Files get_assets() get_assest(item_id=Integer) Description: Get the assets(files) associated with an item. Arguments: item_id: UUID of the item. Returns: Array of dictionaries containing asset data. Return None on API call failure. Example: assets = monday.get_assets(item_id=123456789) upload_file_to_column() upload_file_to_column(item_id=Integer, column_id=String, filepath=String) Description: Upload a local file to a file type column of an item. Remote files not supported. Arguments: item_id: UUID of the item. column_id: Column ID to upload the file to. filepath: Absolute Path to file on the local system. File Extension required. Returns: UUID of the asset Example: asset_id = monday.upload_file_to_column(item_id=123456789, column_id=\"column_id\", filepath=\"path/to/file.pdf) add_file_to_update() add_file_to_update(update_id=Integer, filepath=String) Description: Upload a local file to an update. Remote files not supported. Arguments: update_id: UUID of the update. filepath: Absolute Path to file on the local system. File Extension required. Returns: UUID of the asset Example: asset_id = monday.add_file_to_update(update_id=123456789, filepath=\"path/to/file.pdf)","title":"Files"},{"location":"1.109%20Files/#files","text":"","title":"Files"},{"location":"1.109%20Files/#get_assets","text":"get_assest(item_id=Integer) Description: Get the assets(files) associated with an item. Arguments: item_id: UUID of the item. Returns: Array of dictionaries containing asset data. Return None on API call failure. Example: assets = monday.get_assets(item_id=123456789)","title":"get_assets()"},{"location":"1.109%20Files/#upload_file_to_column","text":"upload_file_to_column(item_id=Integer, column_id=String, filepath=String) Description: Upload a local file to a file type column of an item. Remote files not supported. Arguments: item_id: UUID of the item. column_id: Column ID to upload the file to. filepath: Absolute Path to file on the local system. File Extension required. Returns: UUID of the asset Example: asset_id = monday.upload_file_to_column(item_id=123456789, column_id=\"column_id\", filepath=\"path/to/file.pdf)","title":"upload_file_to_column()"},{"location":"1.109%20Files/#add_file_to_update","text":"add_file_to_update(update_id=Integer, filepath=String) Description: Upload a local file to an update. Remote files not supported. Arguments: update_id: UUID of the update. filepath: Absolute Path to file on the local system. File Extension required. Returns: UUID of the asset Example: asset_id = monday.add_file_to_update(update_id=123456789, filepath=\"path/to/file.pdf)","title":"add_file_to_update()"},{"location":"1.110%20Items/","text":"Items get_item_ids_from_group() get_item_ids_from_group(board_id=Integer, group_id=String) Description: Get all item IDs from a specific group on a board. Cursor Based Pagination Required. Records limited to 500 per call. Arguments: board_id: UUID of the board. group_id: UUID of the group. Returns: Array of Dictionaries containing item Data. Example: item_ids = monday.get_item_ids_from_group(board_id=123456789, group_id=\"group_id\") get_items_page_from_group() get_items_page_from_group(board_id=Integer, group_id=String, columns=List) Description: Get all items from a specific group on a board along with column values. Arguments: board_id: UUID of the board. group_id: UUID of the group. columns: List of column IDs to get the values for. Returns: Array of Dictionaries containing item & column data. Example: item_ids = monday.get_items_page_from_group(board_id=123456789, group_id=\"group_id\", columns=[\"column1\", \"column2\", \"column3\"]) get_item_ids_between_dates() get_item_ids_between_dates(board_id=Integer, group_id=String, column_id=String, start_date=String, end_date=String) Description: Get Item IDs between a specified date range. Supports Timeline columns and start dates. Arguments: board_id: UUID of the board. group_id: UUID of the group. column_id: UUID of the timeline column to filter the dates on. start_date: Start of date range. end_date: End of date range. Returns: Array containing Item IDs Example: item_ids = monday.get_item_ids_between_dates(board_id=123456789, group_id=\"group_id\", column_id=\"column_id\", start_date=YYYY-MM-DD, end_date=YYYY-MM-DD) get_item_ids_between_date() get_item_ids_between_date(board_id=Integer, group_id=String, column_id=String, start_date=String, end_date=String) Description: Get Item IDs between a specified date range. Supports Date columns. Arguments: board_id: UUID of the board. group_id: UUID of the group. column_id: UUID of the timeline column to filter the dates on. start_date: Start of date range. end_date: End of date range. Returns: Array containing Item IDs Example: item_ids = monday.get_item_ids_between_date(board_id=123456789, group_id=\"group_id\", column_id=\"column_id\", start_date=YYYY-MM-DD, end_date=YYYY-MM-DD) get_item_columns() get_item_columns(item_list=List, column_id_list=List) Description: Asynchronous API call to get column values of items on a board. Arguments: item_id_list: Array of item IDs column_id_list: Array of column IDs Returns: Array of dictionaries containing item data. Example: item_data = monday.get_item_columns(item_id_list=[123456789, 987654321, 111222333], [\"column1\", \"column2\", \"column3\"]) create_item() create_item(board=Integer, group=String, item_name=String) Description: Create a new item within a group on a specific board. Arguments: board: UUID of the board to create the item on. group: UUID of the group to create the item in. item_name: Name of the new item to be created. Returns: UUID of the newly created item. Return None on API call failure. Example: new_item = monday.create_item(board=123456789, group=\"group_id\", item_name=\"Item Name\") create_item_with_column_values() create_item_with_column_values(board=Integer, group=String, item_name=String, column_dict=Dictionary) Description: Create a New item within a group on a board. Populate specific column values on item creation. Arguments: board: UUID of the board to create the item on. group: UUID of the group to create the item in. item_name: Name of the new item to be created. column_dict: Name of the new item to be created. Dictionary of column values to set when item is created For full details on column values, see the column dictionary format section here Returns: UUID of the newly created item. Return None on API call failure. Example: columns = { \"text\": {\"type\": \"text\", \"values\": [\"Some Text\"]}, \"text1\": {\"type\": \"text\", \"values\": [\"More Text\"]}, \"status\": {\"type\": \"status\", \"values\": [\"Status Label\"]}, \"timeline3\": {\"type\": \"timeline\", \"values\": [\"2024-01-01\", \"2024-01-02\"]}, \"connect_boards_1\": {\"type\": \"connect_boards\", \"values\": [[123456789, 987654321]]} } new_item = monday.create_item_with_column_values(board=123456789, group=\"group_id\", item_name=\"Item Name\", column_dict=columns) delete_item() delete_item(item_id=Integer) Description: Delete an item from the platform. Arguments: item_id: UUID of the item to delete. Returns: None Example: print(monday.delete_item(item_id=123456789)","title":"Items"},{"location":"1.110%20Items/#items","text":"","title":"Items"},{"location":"1.110%20Items/#get_item_ids_from_group","text":"get_item_ids_from_group(board_id=Integer, group_id=String) Description: Get all item IDs from a specific group on a board. Cursor Based Pagination Required. Records limited to 500 per call. Arguments: board_id: UUID of the board. group_id: UUID of the group. Returns: Array of Dictionaries containing item Data. Example: item_ids = monday.get_item_ids_from_group(board_id=123456789, group_id=\"group_id\")","title":"get_item_ids_from_group()"},{"location":"1.110%20Items/#get_items_page_from_group","text":"get_items_page_from_group(board_id=Integer, group_id=String, columns=List) Description: Get all items from a specific group on a board along with column values. Arguments: board_id: UUID of the board. group_id: UUID of the group. columns: List of column IDs to get the values for. Returns: Array of Dictionaries containing item & column data. Example: item_ids = monday.get_items_page_from_group(board_id=123456789, group_id=\"group_id\", columns=[\"column1\", \"column2\", \"column3\"])","title":"get_items_page_from_group()"},{"location":"1.110%20Items/#get_item_ids_between_dates","text":"get_item_ids_between_dates(board_id=Integer, group_id=String, column_id=String, start_date=String, end_date=String) Description: Get Item IDs between a specified date range. Supports Timeline columns and start dates. Arguments: board_id: UUID of the board. group_id: UUID of the group. column_id: UUID of the timeline column to filter the dates on. start_date: Start of date range. end_date: End of date range. Returns: Array containing Item IDs Example: item_ids = monday.get_item_ids_between_dates(board_id=123456789, group_id=\"group_id\", column_id=\"column_id\", start_date=YYYY-MM-DD, end_date=YYYY-MM-DD)","title":"get_item_ids_between_dates()"},{"location":"1.110%20Items/#get_item_ids_between_date","text":"get_item_ids_between_date(board_id=Integer, group_id=String, column_id=String, start_date=String, end_date=String) Description: Get Item IDs between a specified date range. Supports Date columns. Arguments: board_id: UUID of the board. group_id: UUID of the group. column_id: UUID of the timeline column to filter the dates on. start_date: Start of date range. end_date: End of date range. Returns: Array containing Item IDs Example: item_ids = monday.get_item_ids_between_date(board_id=123456789, group_id=\"group_id\", column_id=\"column_id\", start_date=YYYY-MM-DD, end_date=YYYY-MM-DD)","title":"get_item_ids_between_date()"},{"location":"1.110%20Items/#get_item_columns","text":"get_item_columns(item_list=List, column_id_list=List) Description: Asynchronous API call to get column values of items on a board. Arguments: item_id_list: Array of item IDs column_id_list: Array of column IDs Returns: Array of dictionaries containing item data. Example: item_data = monday.get_item_columns(item_id_list=[123456789, 987654321, 111222333], [\"column1\", \"column2\", \"column3\"])","title":"get_item_columns()"},{"location":"1.110%20Items/#create_item","text":"create_item(board=Integer, group=String, item_name=String) Description: Create a new item within a group on a specific board. Arguments: board: UUID of the board to create the item on. group: UUID of the group to create the item in. item_name: Name of the new item to be created. Returns: UUID of the newly created item. Return None on API call failure. Example: new_item = monday.create_item(board=123456789, group=\"group_id\", item_name=\"Item Name\")","title":"create_item()"},{"location":"1.110%20Items/#create_item_with_column_values","text":"create_item_with_column_values(board=Integer, group=String, item_name=String, column_dict=Dictionary) Description: Create a New item within a group on a board. Populate specific column values on item creation. Arguments: board: UUID of the board to create the item on. group: UUID of the group to create the item in. item_name: Name of the new item to be created. column_dict: Name of the new item to be created. Dictionary of column values to set when item is created For full details on column values, see the column dictionary format section here Returns: UUID of the newly created item. Return None on API call failure. Example: columns = { \"text\": {\"type\": \"text\", \"values\": [\"Some Text\"]}, \"text1\": {\"type\": \"text\", \"values\": [\"More Text\"]}, \"status\": {\"type\": \"status\", \"values\": [\"Status Label\"]}, \"timeline3\": {\"type\": \"timeline\", \"values\": [\"2024-01-01\", \"2024-01-02\"]}, \"connect_boards_1\": {\"type\": \"connect_boards\", \"values\": [[123456789, 987654321]]} } new_item = monday.create_item_with_column_values(board=123456789, group=\"group_id\", item_name=\"Item Name\", column_dict=columns)","title":"create_item_with_column_values()"},{"location":"1.110%20Items/#delete_item","text":"delete_item(item_id=Integer) Description: Delete an item from the platform. Arguments: item_id: UUID of the item to delete. Returns: None Example: print(monday.delete_item(item_id=123456789)","title":"delete_item()"},{"location":"1.111%20Columns/","text":"Columns change_column_values() change_column_values(board_id=Integer, item_id=Integer, column_dict=Dictionary) Description: Change the column values of an item. Multiple column values can be changed in a single query. Arguments: board_id: UUID of the board to create the item on. item_id: UUID of the Item the column values should be changed on. column_dict: Name of the new item to be created. Dictionary of column values to set when item is created For full details on column values, see the create_item_with_column_values() section here Returns: None Example: columns = { \"text\": {\"type\": \"text\", \"values\": [\"Some Text\"]}, \"text1\": {\"type\": \"text\", \"values\": [\"More Text\"]}, \"status\": {\"type\": \"status\", \"values\": [\"Status Label\"]}, \"timeline3\": {\"type\": \"timeline\", \"values\": [\"2024-01-01\", \"2024-01-02\"]}, \"connect_boards_1\": {\"type\": \"connect_boards\", \"values\": [[123456789, 987654321]]} } print(monday.create_item_with_column_values(board_id=123456789, item_id=\"group_id\", column_dict=columns)) Setting Column Values - Column Dictionary Format: columns = {\"column_id\": {\"type\": \"column_type\", \"values\": [\"value1\", \"value2\", \"etc\"] Arguments for each column should be passed in the order defined in the official API documentation within the values list. The correct number of arguments must be specified as well. Note Not all column types are currently supported by PyMonday Below is a list of all column types currently supported and shows the number & type of arguments required. The first argument in the line is always the column_id: 'text': One Argument. Text String 'checkbox': One Argument. Boolean. True or False 'timeline': Two Arguments. From Date & To Date. Must be Strings formatted as YYYY-MM-DD 'connect_boards': One Argument. List containing item IDs. Must be integers. 'country': Two Arguments. 2 digit country code & country name. Both Strings. 'date': One Argument. Date. Must be String formatted as YYYY-MM-DD 'date_time': Two Arguments. Date & Time. Must be Strings formatted as YYYY-MM-DD & HH:MM:SS 'dependency': One Argument. List containing item IDs. Must be integers. 'dropdown': One Argument. Text String 'email': Two Arguments. Email & Display Text. Both Strings. 'hour': Two Arguments. Hour & Minutes. Both Integers. No Leading Zeros. 'link': Two Arguments. URL & Display Text. Both Strings. 'location': Three Arguments. Latitude, Longitude & Address. All Strings. 'long_text': One Argument. Text String 'name': One Argument. Text String 'numbers': One Argument. Integer 'people': Two Arguments. ID of Person/Team & Identifier. ID Must be an Integer. Identifier should be a String, either \"person\" or \"team\" 'status': One Argument. Text String 'time_zone': One Argument. Text String. Must be a valid timezone i.e. \"Europe/London\" For example, the timeline column type requires 2 arguments; the from and to dates. Therefore the column dictionary to be passed to the function would be: columns = {\"timeline_1\": {\"type\": \"timeline\", \"values\": [\"2024-01-01\", \"2024-01-02\"]}} Note Multiple column values can be passed simultaneously Reading Column Values The following data types are retrieved for each column: text value column (id & title) BoardRelationValue (display_value & linked_items_id) MirrorValue (display_value) Example 1: If you use the get_items_page_from_groups() method, you will receive the data in the following format: \"items\": [ { \"id\": \"123456789\", \"name\": \"Item 1\", \"column_values\": [ { \"column\": { \"id\": \"mirror_1\", \"title\": \"Mirror Column\" }, \"value\": null, \"text\": null, \"display_value\": \"Value 1\" } ] }, { \"id\": \"987654321\", \"name\": \"Item 2\", \"column_values\": [ { \"column\": { \"id\": \"mirror_1\", \"title\": \"Mirror Column\" }, \"value\": null, \"text\": null, \"display_value\": \"Value 2\" } ] } ] You can access the column data by navigating through the nested data structures: text = item[0]['column_values'][0]['display_value'] print(text) >>> Value 1 Example 2: In this example we've added a connect column to the data received: \"items\": [ { \"id\": \"123456789\", \"name\": \"Item 1\", \"column_values\": [ { \"column\": { \"id\": \"connect_boards\", \"title\": \"Connect Column\" }, \"value\": \"{\\\"changed_at\\\":\\\"2024-02-06T21:48:54.709Z\\\",\\\"linkedPulseIds\\\":[{\\\"linkedPulseId\\\":111111111}]}\", \"text\": null, \"display_value\": \"Connected Item 1\", \"linked_item_ids\": [ \"111111111\" ] }, { \"column\": { \"id\": \"mirror_1\", \"title\": \"Mirror Column\" }, \"value\": null, \"text\": null, \"display_value\": \"Value 1\" } ] }, { \"id\": \"987654321\", \"name\": \"Item 2\", \"column_values\": [ { \"column\": { \"id\": \"connect_boards\", \"title\": \"Connect Column\" }, \"value\": \"{\\\"changed_at\\\":\\\"2024-02-06T21:48:54.709Z\\\",\\\"linkedPulseIds\\\":[{\\\"linkedPulseId\\\":222222222}]}\", \"text\": null, \"display_value\": \"Connected Item 2\", \"linked_item_ids\": [ \"222222222\" ] }, { \"column\": { \"id\": \"mirror_1\", \"title\": \"Mirror Column\" }, \"value\": null, \"text\": null, \"display_value\": \"Value 2\" } ] } ] To access the ID(s) of the item(s) linked to Item 2 on the connect column, we can use: linkedIDs = item[1]['column_values'][0]['linked_item_ids'] print(linkedIDs) >>> ['222222222']","title":"Columns"},{"location":"1.111%20Columns/#columns","text":"","title":"Columns"},{"location":"1.111%20Columns/#change_column_values","text":"change_column_values(board_id=Integer, item_id=Integer, column_dict=Dictionary) Description: Change the column values of an item. Multiple column values can be changed in a single query. Arguments: board_id: UUID of the board to create the item on. item_id: UUID of the Item the column values should be changed on. column_dict: Name of the new item to be created. Dictionary of column values to set when item is created For full details on column values, see the create_item_with_column_values() section here Returns: None Example: columns = { \"text\": {\"type\": \"text\", \"values\": [\"Some Text\"]}, \"text1\": {\"type\": \"text\", \"values\": [\"More Text\"]}, \"status\": {\"type\": \"status\", \"values\": [\"Status Label\"]}, \"timeline3\": {\"type\": \"timeline\", \"values\": [\"2024-01-01\", \"2024-01-02\"]}, \"connect_boards_1\": {\"type\": \"connect_boards\", \"values\": [[123456789, 987654321]]} } print(monday.create_item_with_column_values(board_id=123456789, item_id=\"group_id\", column_dict=columns))","title":"change_column_values()"},{"location":"1.111%20Columns/#setting-column-values-column-dictionary-format","text":"columns = {\"column_id\": {\"type\": \"column_type\", \"values\": [\"value1\", \"value2\", \"etc\"] Arguments for each column should be passed in the order defined in the official API documentation within the values list. The correct number of arguments must be specified as well. Note Not all column types are currently supported by PyMonday Below is a list of all column types currently supported and shows the number & type of arguments required. The first argument in the line is always the column_id: 'text': One Argument. Text String 'checkbox': One Argument. Boolean. True or False 'timeline': Two Arguments. From Date & To Date. Must be Strings formatted as YYYY-MM-DD 'connect_boards': One Argument. List containing item IDs. Must be integers. 'country': Two Arguments. 2 digit country code & country name. Both Strings. 'date': One Argument. Date. Must be String formatted as YYYY-MM-DD 'date_time': Two Arguments. Date & Time. Must be Strings formatted as YYYY-MM-DD & HH:MM:SS 'dependency': One Argument. List containing item IDs. Must be integers. 'dropdown': One Argument. Text String 'email': Two Arguments. Email & Display Text. Both Strings. 'hour': Two Arguments. Hour & Minutes. Both Integers. No Leading Zeros. 'link': Two Arguments. URL & Display Text. Both Strings. 'location': Three Arguments. Latitude, Longitude & Address. All Strings. 'long_text': One Argument. Text String 'name': One Argument. Text String 'numbers': One Argument. Integer 'people': Two Arguments. ID of Person/Team & Identifier. ID Must be an Integer. Identifier should be a String, either \"person\" or \"team\" 'status': One Argument. Text String 'time_zone': One Argument. Text String. Must be a valid timezone i.e. \"Europe/London\" For example, the timeline column type requires 2 arguments; the from and to dates. Therefore the column dictionary to be passed to the function would be: columns = {\"timeline_1\": {\"type\": \"timeline\", \"values\": [\"2024-01-01\", \"2024-01-02\"]}} Note Multiple column values can be passed simultaneously","title":"Setting Column Values - Column Dictionary Format:"},{"location":"1.111%20Columns/#reading-column-values","text":"The following data types are retrieved for each column: text value column (id & title) BoardRelationValue (display_value & linked_items_id) MirrorValue (display_value) Example 1: If you use the get_items_page_from_groups() method, you will receive the data in the following format: \"items\": [ { \"id\": \"123456789\", \"name\": \"Item 1\", \"column_values\": [ { \"column\": { \"id\": \"mirror_1\", \"title\": \"Mirror Column\" }, \"value\": null, \"text\": null, \"display_value\": \"Value 1\" } ] }, { \"id\": \"987654321\", \"name\": \"Item 2\", \"column_values\": [ { \"column\": { \"id\": \"mirror_1\", \"title\": \"Mirror Column\" }, \"value\": null, \"text\": null, \"display_value\": \"Value 2\" } ] } ] You can access the column data by navigating through the nested data structures: text = item[0]['column_values'][0]['display_value'] print(text) >>> Value 1 Example 2: In this example we've added a connect column to the data received: \"items\": [ { \"id\": \"123456789\", \"name\": \"Item 1\", \"column_values\": [ { \"column\": { \"id\": \"connect_boards\", \"title\": \"Connect Column\" }, \"value\": \"{\\\"changed_at\\\":\\\"2024-02-06T21:48:54.709Z\\\",\\\"linkedPulseIds\\\":[{\\\"linkedPulseId\\\":111111111}]}\", \"text\": null, \"display_value\": \"Connected Item 1\", \"linked_item_ids\": [ \"111111111\" ] }, { \"column\": { \"id\": \"mirror_1\", \"title\": \"Mirror Column\" }, \"value\": null, \"text\": null, \"display_value\": \"Value 1\" } ] }, { \"id\": \"987654321\", \"name\": \"Item 2\", \"column_values\": [ { \"column\": { \"id\": \"connect_boards\", \"title\": \"Connect Column\" }, \"value\": \"{\\\"changed_at\\\":\\\"2024-02-06T21:48:54.709Z\\\",\\\"linkedPulseIds\\\":[{\\\"linkedPulseId\\\":222222222}]}\", \"text\": null, \"display_value\": \"Connected Item 2\", \"linked_item_ids\": [ \"222222222\" ] }, { \"column\": { \"id\": \"mirror_1\", \"title\": \"Mirror Column\" }, \"value\": null, \"text\": null, \"display_value\": \"Value 2\" } ] } ] To access the ID(s) of the item(s) linked to Item 2 on the connect column, we can use: linkedIDs = item[1]['column_values'][0]['linked_item_ids'] print(linkedIDs) >>> ['222222222']","title":"Reading Column Values"},{"location":"1.112%20Subitems/","text":"Subitems get_subitems() get_subitems(item_id=Integer) Description: Get the UUIDs of the subitems of an item Arguments: item_id: UUID of the parent Item. Returns: Array of subitem IDs. Return None on API call failure. Example: monday.get_subitems(item_id=123456789) get_subitem_info() get_subitem_info(sub_item_id=Integer) Description: Get the Board ID and Parent ID from a Subitem. Arguments: sub_item_id: UUID of the subitem. Returns: Dictionary containing board & parent ID information. Example: monday.get_subitem_info(sub_item_id=123456789) create_subitem() create_subitems(parent_id=Integer, item_name=String, column_dictionary=Dictionary) Description: Create a new Subitem under a Parent Item. Arguments: parent_id: UUID of the item to create the subitem under. item_name: Name of the new Subitem. column_dictionary: Dictionary containing column IDs, column types and values. For full details on column values, see the column dictionary format section here Returns: UUID of the new subitem. Example: columns = { \"text\": {\"type\": \"text\", \"values\": [\"Some Text\"]}, \"text1\": {\"type\": \"text\", \"values\": [\"More Text\"]}, \"status\": {\"type\": \"status\", \"values\": [\"Status Label\"]}, \"timeline3\": {\"type\": \"timeline\", \"values\": [\"2024-01-01\", \"2024-01-02\"]}, \"connect_boards_1\": {\"type\": \"connect_boards\", \"values\": [[123456789, 987654321]]} } new_sub_item = monday.create_item_with_column_values(parent_id=123456789, item_name=\"Item Name\", column_dictionary=columns)","title":"Subitems"},{"location":"1.112%20Subitems/#subitems","text":"","title":"Subitems"},{"location":"1.112%20Subitems/#get_subitems","text":"get_subitems(item_id=Integer) Description: Get the UUIDs of the subitems of an item Arguments: item_id: UUID of the parent Item. Returns: Array of subitem IDs. Return None on API call failure. Example: monday.get_subitems(item_id=123456789)","title":"get_subitems()"},{"location":"1.112%20Subitems/#get_subitem_info","text":"get_subitem_info(sub_item_id=Integer) Description: Get the Board ID and Parent ID from a Subitem. Arguments: sub_item_id: UUID of the subitem. Returns: Dictionary containing board & parent ID information. Example: monday.get_subitem_info(sub_item_id=123456789)","title":"get_subitem_info()"},{"location":"1.112%20Subitems/#create_subitem","text":"create_subitems(parent_id=Integer, item_name=String, column_dictionary=Dictionary) Description: Create a new Subitem under a Parent Item. Arguments: parent_id: UUID of the item to create the subitem under. item_name: Name of the new Subitem. column_dictionary: Dictionary containing column IDs, column types and values. For full details on column values, see the column dictionary format section here Returns: UUID of the new subitem. Example: columns = { \"text\": {\"type\": \"text\", \"values\": [\"Some Text\"]}, \"text1\": {\"type\": \"text\", \"values\": [\"More Text\"]}, \"status\": {\"type\": \"status\", \"values\": [\"Status Label\"]}, \"timeline3\": {\"type\": \"timeline\", \"values\": [\"2024-01-01\", \"2024-01-02\"]}, \"connect_boards_1\": {\"type\": \"connect_boards\", \"values\": [[123456789, 987654321]]} } new_sub_item = monday.create_item_with_column_values(parent_id=123456789, item_name=\"Item Name\", column_dictionary=columns)","title":"create_subitem()"}]}